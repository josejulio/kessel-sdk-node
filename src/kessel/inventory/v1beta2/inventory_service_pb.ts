// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file kessel/inventory/v1beta2/inventory_service.proto (package kessel.inventory.v1beta2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import type { CheckRequestSchema } from "./check_request_pb";
import { file_kessel_inventory_v1beta2_check_request } from "./check_request_pb";
import type { CheckResponseSchema } from "./check_response_pb";
import { file_kessel_inventory_v1beta2_check_response } from "./check_response_pb";
import type { CheckForUpdateRequestSchema } from "./check_for_update_request_pb";
import { file_kessel_inventory_v1beta2_check_for_update_request } from "./check_for_update_request_pb";
import type { CheckForUpdateResponseSchema } from "./check_for_update_response_pb";
import { file_kessel_inventory_v1beta2_check_for_update_response } from "./check_for_update_response_pb";
import type { ReportResourceRequestSchema } from "./report_resource_request_pb";
import { file_kessel_inventory_v1beta2_report_resource_request } from "./report_resource_request_pb";
import type { ReportResourceResponseSchema } from "./report_resource_response_pb";
import { file_kessel_inventory_v1beta2_report_resource_response } from "./report_resource_response_pb";
import type { DeleteResourceRequestSchema } from "./delete_resource_request_pb";
import { file_kessel_inventory_v1beta2_delete_resource_request } from "./delete_resource_request_pb";
import type { DeleteResourceResponseSchema } from "./delete_resource_response_pb";
import { file_kessel_inventory_v1beta2_delete_resource_response } from "./delete_resource_response_pb";
import type { StreamedListObjectsRequestSchema } from "./streamed_list_objects_request_pb";
import { file_kessel_inventory_v1beta2_streamed_list_objects_request } from "./streamed_list_objects_request_pb";
import type { StreamedListObjectsResponseSchema } from "./streamed_list_objects_response_pb";
import { file_kessel_inventory_v1beta2_streamed_list_objects_response } from "./streamed_list_objects_response_pb";

/**
 * Describes the file kessel/inventory/v1beta2/inventory_service.proto.
 */
export const file_kessel_inventory_v1beta2_inventory_service: GenFile =
  /*@__PURE__*/
  fileDesc(
    "CjBrZXNzZWwvaW52ZW50b3J5L3YxYmV0YTIvaW52ZW50b3J5X3NlcnZpY2UucHJvdG8SGGtlc3NlbC5pbnZlbnRvcnkudjFiZXRhMjKRBgoWS2Vzc2VsSW52ZW50b3J5U2VydmljZRKBAQoFQ2hlY2sSJi5rZXNzZWwuaW52ZW50b3J5LnYxYmV0YTIuQ2hlY2tSZXF1ZXN0Gicua2Vzc2VsLmludmVudG9yeS52MWJldGEyLkNoZWNrUmVzcG9uc2UiJ4LT5JMCIToBKiIcL2FwaS9pbnZlbnRvcnkvdjFiZXRhMi9jaGVjaxKlAQoOQ2hlY2tGb3JVcGRhdGUSLy5rZXNzZWwuaW52ZW50b3J5LnYxYmV0YTIuQ2hlY2tGb3JVcGRhdGVSZXF1ZXN0GjAua2Vzc2VsLmludmVudG9yeS52MWJldGEyLkNoZWNrRm9yVXBkYXRlUmVzcG9uc2UiMILT5JMCKjoBKiIlL2FwaS9pbnZlbnRvcnkvdjFiZXRhMi9jaGVja2ZvcnVwZGF0ZRKgAQoOUmVwb3J0UmVzb3VyY2USLy5rZXNzZWwuaW52ZW50b3J5LnYxYmV0YTIuUmVwb3J0UmVzb3VyY2VSZXF1ZXN0GjAua2Vzc2VsLmludmVudG9yeS52MWJldGEyLlJlcG9ydFJlc291cmNlUmVzcG9uc2UiK4LT5JMCJToBKiIgL2FwaS9pbnZlbnRvcnkvdjFiZXRhMi9yZXNvdXJjZXMSoAEKDkRlbGV0ZVJlc291cmNlEi8ua2Vzc2VsLmludmVudG9yeS52MWJldGEyLkRlbGV0ZVJlc291cmNlUmVxdWVzdBowLmtlc3NlbC5pbnZlbnRvcnkudjFiZXRhMi5EZWxldGVSZXNvdXJjZVJlc3BvbnNlIiuC0+STAiU6ASoqIC9hcGkvaW52ZW50b3J5L3YxYmV0YTIvcmVzb3VyY2VzEoQBChNTdHJlYW1lZExpc3RPYmplY3RzEjQua2Vzc2VsLmludmVudG9yeS52MWJldGEyLlN0cmVhbWVkTGlzdE9iamVjdHNSZXF1ZXN0GjUua2Vzc2VsLmludmVudG9yeS52MWJldGEyLlN0cmVhbWVkTGlzdE9iamVjdHNSZXNwb25zZTABQnIKKG9yZy5wcm9qZWN0X2tlc3NlbC5hcGkuaW52ZW50b3J5LnYxYmV0YTJQAVpEZ2l0aHViLmNvbS9wcm9qZWN0LWtlc3NlbC9pbnZlbnRvcnktYXBpL2FwaS9rZXNzZWwvaW52ZW50b3J5L3YxYmV0YTJiBnByb3RvMw",
    [
      file_google_api_annotations,
      file_kessel_inventory_v1beta2_check_request,
      file_kessel_inventory_v1beta2_check_response,
      file_kessel_inventory_v1beta2_check_for_update_request,
      file_kessel_inventory_v1beta2_check_for_update_response,
      file_kessel_inventory_v1beta2_report_resource_request,
      file_kessel_inventory_v1beta2_report_resource_response,
      file_kessel_inventory_v1beta2_delete_resource_request,
      file_kessel_inventory_v1beta2_delete_resource_response,
      file_kessel_inventory_v1beta2_streamed_list_objects_request,
      file_kessel_inventory_v1beta2_streamed_list_objects_response,
    ],
  );

/**
 * KesselInventoryService provides APIs to perform relationship checks
 * and manage inventory resource lifecycles (reporting and deletion).
 *
 * @generated from service kessel.inventory.v1beta2.KesselInventoryService
 */
export const KesselInventoryService: GenService<{
  /**
   * Performs an relationship check to determine whether a subject has a specific
   * permission or relationship on a resource.
   *
   * This API evaluates whether the provided subject is a member of the specified relation
   * (e.g., "viewer", "editor", "admin") on the target object. It answers the question:
   * "Does subject *X* have relation *Y* on object *Z*?"
   *
   * Common use cases include enforcing read access, conditional UI visibility,
   * or authorization gating for downstream API calls.
   *
   * @generated from rpc kessel.inventory.v1beta2.KesselInventoryService.Check
   */
  check: {
    methodKind: "unary";
    input: typeof CheckRequestSchema;
    output: typeof CheckResponseSchema;
  };
  /**
   * Performs a strongly consistent relationship check to determine whether a subject
   * has a specific relation to an object (representing, for example, a permission).
   *
   * This API answers the question:
   * "Is subject *X* currently authorized to update or modify resource *Y*?"
   * Unlike the basic `Check` endpoint, this method guarantees a fully up-to-date
   * view of the relationship state (e.g., not relying on cached or eventually consistent data).
   *
   * It is intended to be used just prior to sensitive operation (e.g., update, delete)
   * which depend on the current state of the relationship.
   *
   * @generated from rpc kessel.inventory.v1beta2.KesselInventoryService.CheckForUpdate
   */
  checkForUpdate: {
    methodKind: "unary";
    input: typeof CheckForUpdateRequestSchema;
    output: typeof CheckForUpdateResponseSchema;
  };
  /**
   * Reports to Kessel Inventory that a Resource has been created or has been updated.
   *
   * Reporters can use this API to report facts about their resources in order to
   * facilitate integration, correlation, and access control.
   *
   * Each call can include:
   * - Reporter-specific attributes and relationships (`representations.reporter`)
   * - Shared attributes and relationships common to all reporters (`representations.common`)
   * - Identifiers and metadata that allow correlation to an existing resource
   *
   * Multiple reporters may report representations for the same resource.
   * Kessel Inventory correlates these
   * based on correlation keys provided for a given resource type
   *
   * All versions of your reported facts will be retained and can be queried as needed
   *
   * The relationships reported through this API are used to determine relationship check outcomes
   * via the Check and CheckForUpdate APIs.
   *
   * Reporters are responsible for ensuring delivery guarantees and message ordering
   * appropriate to the sensitivity and consistency needs of their use case.
   *
   * This API does **not** guarantee immediate read-your-writes consistency by default.
   *  If a reporter requires newly submitted resources or relationships to be visible
   * in subsequent checks (e.g., `Check`), the request must explicitly set
   * `write_visibility = IMMEDIATE`.
   *
   *
   *
   * @generated from rpc kessel.inventory.v1beta2.KesselInventoryService.ReportResource
   */
  reportResource: {
    methodKind: "unary";
    input: typeof ReportResourceRequestSchema;
    output: typeof ReportResourceResponseSchema;
  };
  /**
   * Reports to Kessel Inventory that a Reporter's representation of a Resource has been deleted.
   *
   * This operation is typically used when a resource has been decommissioned or
   * is no longer reported by any authorized system.
   *
   * As a result, relationship checks performed via the `Check` and
   * `CheckForUpdate` APIs will no longer resolve positively for the deleted
   * resource. Any decisions that depend on relationships tied to
   * this resource will be affected.
   *
   * As an example, it can revoke previously granted access across the system.
   *
   * @generated from rpc kessel.inventory.v1beta2.KesselInventoryService.DeleteResource
   */
  deleteResource: {
    methodKind: "unary";
    input: typeof DeleteResourceRequestSchema;
    output: typeof DeleteResourceResponseSchema;
  };
  /**
   * Streams a list of objects where the given subject has the specified relation.
   *
   * This relationship query answers the question:
   * "Which objects of type *X* does subject *Y* have the *Z* relation to?"
   *
   * It is often used to power user-facing dashboards, filtered UIs, or policy-driven
   * access lists. The result is streamed incrementally to support large datasets and
   * reduce client-side latency or memory pressure.
   *
   * Pagination and consistency controls allow fine-tuned performance and data freshness.
   *
   * @generated from rpc kessel.inventory.v1beta2.KesselInventoryService.StreamedListObjects
   */
  streamedListObjects: {
    methodKind: "server_streaming";
    input: typeof StreamedListObjectsRequestSchema;
    output: typeof StreamedListObjectsResponseSchema;
  };
}> =
  /*@__PURE__*/
  serviceDesc(file_kessel_inventory_v1beta2_inventory_service, 0);
